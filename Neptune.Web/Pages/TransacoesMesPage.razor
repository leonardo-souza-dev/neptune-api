@page "/{ano:int?}/{mes:int?}"

@inject NavigationManager UriHelper
@inject ITransacaoService TransacaoService
@inject NavigationManager NavManager

<h1>Transações</h1>

@if (_transacoesMesViewModel != null)
{
    <div>
        <NavLink href="@NavMesAnterior" target="_self">anterior</NavLink>
        <span>Mês nº @_transacoesMesViewModel.Mes</span>
        <NavLink href="@NavMesSeguinte" target="_self">próximo</NavLink>
    </div>
}

<button class="btn btn-primary" @onclick="@NovaTransacao">Nova Transação</button>

@if (_novaTransacaoVisivel)
{
    <EditForm Model="@_novaTransacaoViewModel" OnValidSubmit="@AdicionarTransacao">
        <InputDate @bind-Value="@_novaTransacaoViewModel.Data" />
        <InputText @bind-Value="@_novaTransacaoViewModel.Descricao" placeholder="Descrição da transação" />
        <InputNumber @bind-Value="@_novaTransacaoViewModel.Valor" placeholder="Valor" />
        <InputNumber @bind-Value="@_novaTransacaoViewModel.ContaId" placeholder="ContaId" />
        <button class="btn btn-primary" type="submit">Salvar</button>
    </EditForm>
}

@if (_transacoesMesViewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{    
    <EditForm Model="@_transacoesMesViewModel">
    <div style="display: block;">
 
        <div style="" >
            <div class="col-2" style="" >Contas</div>
            
            <ul style="float: left;" >
            @if (_transacoesMesViewModel.Contas.Any())
            {
                @foreach(var conta in _transacoesMesViewModel.Contas)
                {
                    <li>
                        <InputCheckbox @bind-bind-Value="conta.Ativo"/>@conta.Id - @conta.Nome
                    </li>
                }
            }
            else
            {
                <li>contas vazio @_transacoesMesViewModel.Contas.Count </li>
            }
            </ul>
        </div>

        <div class="col-6" style="float: left;">
            <table class="table transacoes">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Descricao</th>
                        <th>Categoria</th>
                        <th>Valor</th>
                        <th>Conta</th>
                        <th>Editar</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <th colspan="6" style="text-align: right;">Saldo no dia @_transacoesMesViewModel.UltimoDiaMesAnterior: @_transacoesMesViewModel.SaldoUltimoDiaMesAnterior</th>
                    </tr>
                    @foreach (var dia in _transacoesMesViewModel.Dias)
                    {
                        <tr>
                            <td colspan="6">@dia.Data.ToString("dd/MM/yyyy")</td>
                        </tr>
                        @foreach(TransacaoViewModel transacao in dia.Transacoes)
                        {
                        <tr style="background-color: #cccccc">
                            <td>@transacao.Id</td>
                            <td>@transacao.Descricao</td>
                            <td>Lorem Ipsum</td>
                            <td>@transacao.Valor</td>
                            <td>@transacao.ContaId</td>
                            <td><a href="/editar-transacao/@transacao.Id">Editar</a></td>
                        </tr>
                        }
                        <tr>
                            <td colspan="6" style="text-align: right;">Saldo do dia: @dia.ObterSaldoDoDia()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    </EditForm>
}

@code {
    [Parameter]
    public int Ano { get; set; }

    [Parameter]
    public int Mes { get; set; }

    TransacoesMesViewModel _transacoesMesViewModel { get; set; }

    NovaTransacaoViewModel _novaTransacaoViewModel = new();

    List<ContaViewModel> _contas = new List<ContaViewModel>();

    bool _novaTransacaoVisivel;
    string NavMesAnterior => $"/{_transacoesMesViewModel.ObterAnoDoMesAnterior()}/{_transacoesMesViewModel.ObterMesAnterior()}";
    string NavMesSeguinte => $"/{_transacoesMesViewModel.ObterAnoDoMesSeguinte()}/{_transacoesMesViewModel.ObterMesSeguinte()}";

    protected override async Task OnInitializedAsync()
    {
        if (Mes == 0)
            Mes = DateTime.Now.Month;
        if (Ano == 0)
            Ano = DateTime.Now.Year;

        _contas = await TransacaoService.ObterContasViewModel();

        _transacoesMesViewModel = await ObterTransacoesMes(Mes, Ano, _contas.Select(x => x.Id).ToList());
    }

    private async Task<TransacoesMesViewModel> ObterTransacoesMes(int mes, int ano, List<int> contas)
    {
        return await TransacaoService.ObterTransacoesMesViewModel(Mes, Ano, contas);
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }

    private void NovaTransacao()
    {
        _novaTransacaoViewModel = new NovaTransacaoViewModel();
        _novaTransacaoVisivel = true;
    }

    private async Task AdicionarTransacao()
    {
        var novaTransacaoPersistida = await TransacaoService.NovaTransacao(_novaTransacaoViewModel);
        _transacoesMesViewModel.AdicionarTransacao(novaTransacaoPersistida);
        _novaTransacaoVisivel = false;
    }

    private async void ClicouConta()
    {
        await TransacaoService.ObterTransacoesMesViewModel(Mes, Ano, new List<int> { 1 });
    }
}
