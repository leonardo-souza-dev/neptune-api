@page "/{ano:int?}/{mes:int?}"

@inject NavigationManager UriHelper
@inject ITransacaoService TransacaoService
@inject NavigationManager NavManager

<h1>Transações</h1>

@if (_transacoesViewModel != null)
{
    <div>
        <NavLink href="@NavMesAnterior" target="_self">anterior</NavLink>
        <span>@_transacoesViewModel.Mes</span>
        <NavLink href="@NavMesSeguinte" target="_self">próximo</NavLink>
    </div>
}

<button class="btn btn-primary" @onclick="@NovaTransacao">Nova Transação</button>

@if (_novaTransacaoVisivel)
{
    <EditForm Model="@_novaTransacaoViewModel" OnValidSubmit="@Nova">
        <InputDate @bind-Value="@_novaTransacaoViewModel.Data" />
        <InputText @bind-Value="@_novaTransacaoViewModel.Descricao" placeholder="Descrição da transação" />
        <InputNumber @bind-Value="@_novaTransacaoViewModel.Valor" placeholder="Valor" />
        <InputNumber @bind-Value="@_novaTransacaoViewModel.ContaId" placeholder="ContaId" />
        <button class="btn btn-primary" type="submit">Salvar</button>
    </EditForm>
}

@if (_transacoesViewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Descricao</th>
                <th>Valor</th>
                <th>Editar</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th colspan="4" style="text-align: right;">Saldo no dia @_transacoesViewModel.UltimoDiaMesAnterior: @_transacoesViewModel.SaldoUltimoDiaMesAnterior</th>
            </tr>
            @foreach (var dia in _transacoesViewModel.Dias)
            {
                <TransacoesDiaComp dia="@dia" />
            }
        </tbody>
    </table>
}

@code {

    [Parameter]
    public int Ano { get; set; }

    [Parameter]
    public int Mes { get; set; }

    TransacoesViewModel _transacoesViewModel { get; set; }
    NovaTransacaoViewModel _novaTransacaoViewModel = new();
    bool _novaTransacaoVisivel;
    string NavMesAnterior => $"/{_transacoesViewModel.ObterAnoDoMesAnterior()}/{_transacoesViewModel.ObterMesAnterior()}";
    string NavMesSeguinte => $"/{_transacoesViewModel.ObterAnoDoMesSeguinte()}/{_transacoesViewModel.ObterMesSeguinte()}";

    protected override async Task OnInitializedAsync()
    {
        if (Mes == 0)
            Mes = DateTime.Now.Month;
        if (Ano == 0)
            Ano = DateTime.Now.Year;

        _transacoesViewModel = await TransacaoService.ObterTransacoesViewModel(Mes, Ano, 1);
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }

    private void NovaTransacao()
    {
        _novaTransacaoViewModel = new NovaTransacaoViewModel();
        _novaTransacaoVisivel = true;
    }

    private async Task Nova()
    {
        var novaTransacaoPersistida = await TransacaoService.NovaTransacao(_novaTransacaoViewModel);
        _transacoesViewModel.AdicionarTransacao(novaTransacaoPersistida);
        _novaTransacaoVisivel = false;
    }
}
