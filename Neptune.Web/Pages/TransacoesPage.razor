@page "/"

@using Neptune.Models

@inject NavigationManager UriHelper
@inject ITransacaoService TransacaoService

<h1>Transações</h1>

<button class="btn btn-primary" @onclick="@NovaTransacao">Nova Transação</button>

@if (novaTransacaoVisivel)
{
    <EditForm Model="@novaTransacao" OnValidSubmit="@Nova">
        <InputDate @bind-Value="@novaTransacao.Data" @bind-Value:format="dd/MM/yyyy" />
        <InputText @bind-Value="@novaTransacao.Descricao" placeholder="Descrição da transação" />
        <InputNumber @bind-Value="@novaTransacao.Valor" />
        <button class="btn btn-primary" type="submit">Salvar</button>
    </EditForm>
}

@if (Transacoes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Data</th>
                <th>Descricao</th>
                <th>Valor</th>
                <th>Editar</th>
                <th>Id</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transacao in Transacoes)
            {
                <TransacaoComp transacao="@transacao" />
            }
        </tbody>
    </table>
}

@code {
    IList<Transacao> Transacoes { get; set; }
    Transacao novaTransacao = new();
    bool novaTransacaoVisivel = false;

    protected override async Task OnInitializedAsync() => Transacoes = await TransacaoService.ObterTransacoes();

    private void NovaTransacao()
    {
        novaTransacao = new();
        novaTransacaoVisivel = true;
    }

    private async Task Nova()
    {
        var novaTransacaoPersistida = await TransacaoService.NovaTransacao(novaTransacao);
        Transacoes.Add(novaTransacaoPersistida);
        novaTransacaoVisivel = false;
    }
}
