@page "/"

@using Neptune.Models

@inject NavigationManager UriHelper
@inject ITransacaoService TransacaoService

<h1>Transações</h1>

<button class="btn btn-primary" @onclick="@NovaTransacao">Nova Transação</button>

@if (_novaTransacaoVisivel)
{
<EditForm Model="@_novaTransacaoViewModel" OnValidSubmit="@Nova">
    <InputDate @bind-Value="@_novaTransacaoViewModel.Data"  />
    <InputText @bind-Value="@_novaTransacaoViewModel.Descricao" placeholder="Descrição da transação" />
    <InputNumber @bind-Value="@_novaTransacaoViewModel.Valor" placeholder="Valor" />
    <InputNumber @bind-Value="@_novaTransacaoViewModel.ContaId" placeholder="ContaId" />
    <button class="btn btn-primary" type="submit">Salvar</button>
</EditForm>
}

@if (TransacoesViewModel == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Descricao</th>
                <th>Valor</th>
                <th>Editar</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <th colspan="4" style="text-align: right;">Saldo no dia @TransacoesViewModel.UltimoDiaMesAnterior - @TransacoesViewModel.SaldoUltimoDiaMesAnterior</th>
            </tr>
            @foreach (var dia in TransacoesViewModel.Dias)
            {
                <TransacoesDiaComp dia="@dia" />
            }
        </tbody>
    </table>
}

@code {
    TransacoesViewModel TransacoesViewModel { get; set; }
    NovaTransacaoViewModel _novaTransacaoViewModel = new();
    bool _novaTransacaoVisivel = false;

    protected override async Task OnInitializedAsync()
    {
        TransacoesViewModel = await TransacaoService.ObterTransacoesViewModel(DateTime.Now);
    }

    private void NovaTransacao()
    {
        _novaTransacaoViewModel = new NovaTransacaoViewModel();
        _novaTransacaoVisivel = true;
    }

    private async Task Nova()
    {
        var novaTransacaoPersistida = await TransacaoService.NovaTransacao(_novaTransacaoViewModel);
        TransacoesViewModel.AdicionarTransacao(novaTransacaoPersistida);
        _novaTransacaoVisivel = false;
    }
}
